# Generated by Django 5.2.5 on 2025-08-12 00:20

import django.contrib.gis.db.models.fields
import django.core.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='AmenityCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(choices=[('on_premise', 'On-Premise'), ('area_amenity', 'Area Amenity'), ('infrastructure', 'Infrastructure'), ('safety', 'Safety & Security')], max_length=50, unique=True)),
                ('display_name', models.CharField(max_length=100)),
                ('description', models.TextField(blank=True)),
                ('icon', models.CharField(blank=True, max_length=50)),
                ('sort_order', models.PositiveIntegerField(default=0)),
            ],
            options={
                'verbose_name_plural': 'Amenity Categories',
                'db_table': 'amenity_categories',
                'ordering': ['sort_order', 'display_name'],
            },
        ),
        migrations.CreateModel(
            name='BadgeCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(choices=[('infrastructure', 'Infrastructure'), ('safety', 'Safety & Security'), ('lifestyle', 'Lifestyle'), ('verified', 'Verified')], max_length=50, unique=True)),
                ('display_name', models.CharField(max_length=100)),
                ('description', models.TextField(blank=True)),
                ('color_scheme', models.CharField(default='blue', max_length=20)),
                ('sort_order', models.PositiveIntegerField(default=0)),
            ],
            options={
                'verbose_name_plural': 'Badge Categories',
                'db_table': 'badge_categories',
                'ordering': ['sort_order', 'display_name'],
            },
        ),
        migrations.CreateModel(
            name='Country',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('code', models.CharField(max_length=3, unique=True)),
                ('currency_code', models.CharField(max_length=3)),
                ('phone_prefix', models.CharField(max_length=10)),
                ('is_active', models.BooleanField(default=True)),
            ],
            options={
                'verbose_name_plural': 'Countries',
                'db_table': 'countries',
            },
        ),
        migrations.CreateModel(
            name='LandmarkType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, unique=True)),
                ('icon', models.CharField(max_length=50)),
                ('color', models.CharField(default='#000000', max_length=7)),
                ('description', models.TextField(blank=True)),
            ],
            options={
                'db_table': 'landmark_types',
            },
        ),
        migrations.CreateModel(
            name='MediaType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(choices=[('image', 'Image'), ('video', 'Video'), ('document', 'Document')], max_length=20, unique=True)),
                ('max_file_size_mb', models.PositiveIntegerField()),
                ('allowed_formats', models.JSONField(default=list)),
                ('processing_required', models.BooleanField(default=False)),
            ],
            options={
                'db_table': 'media_types',
            },
        ),
        migrations.CreateModel(
            name='RatingCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('display_name', models.CharField(max_length=100)),
                ('description', models.TextField()),
                ('weight_factor', models.DecimalField(decimal_places=2, default=1.0, max_digits=3, validators=[django.core.validators.MinValueValidator(0.1), django.core.validators.MaxValueValidator(5.0)])),
                ('is_active', models.BooleanField(default=True)),
                ('sort_order', models.PositiveIntegerField(default=0)),
            ],
            options={
                'verbose_name_plural': 'Rating Categories',
                'db_table': 'rating_categories',
                'ordering': ['sort_order', 'display_name'],
            },
        ),
        migrations.CreateModel(
            name='County',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('code', models.CharField(max_length=10)),
                ('country', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='counties', to='core.country')),
            ],
            options={
                'verbose_name_plural': 'Counties',
                'db_table': 'counties',
                'unique_together': {('name', 'country')},
            },
        ),
        migrations.CreateModel(
            name='City',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('postal_code_prefix', models.CharField(blank=True, max_length=10)),
                ('latitude', models.DecimalField(blank=True, decimal_places=6, max_digits=9, null=True)),
                ('longitude', models.DecimalField(blank=True, decimal_places=6, max_digits=9, null=True)),
                ('county', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='cities', to='core.county')),
            ],
            options={
                'verbose_name_plural': 'Cities',
                'db_table': 'cities',
                'unique_together': {('name', 'county')},
            },
        ),
        migrations.CreateModel(
            name='Neighborhood',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('average_rent_range', models.CharField(blank=True, choices=[('low', 'Low (< 20K)'), ('medium', 'Medium (20K - 50K)'), ('high', 'High (50K - 100K)'), ('premium', 'Premium (> 100K)')], max_length=50)),
                ('safety_rating', models.DecimalField(blank=True, decimal_places=2, max_digits=3, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(10)])),
                ('description', models.TextField(blank=True)),
                ('city', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='neighborhoods', to='core.city')),
            ],
            options={
                'db_table': 'neighborhoods',
                'unique_together': {('name', 'city')},
            },
        ),
        migrations.CreateModel(
            name='SystemSetting',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('key', models.CharField(max_length=100, unique=True)),
                ('value', models.TextField()),
                ('data_type', models.CharField(choices=[('string', 'String'), ('integer', 'Integer'), ('float', 'Float'), ('boolean', 'Boolean'), ('json', 'JSON')], default='string', max_length=20)),
                ('description', models.TextField(blank=True)),
                ('is_active', models.BooleanField(default=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'system_settings',
            },
        ),
        migrations.CreateModel(
            name='TrustBadge',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('criteria_description', models.TextField()),
                ('icon', models.CharField(max_length=50)),
                ('verification_required', models.BooleanField(default=True)),
                ('auto_assignable', models.BooleanField(default=False)),
                ('point_threshold', models.PositiveIntegerField(default=0)),
                ('is_active', models.BooleanField(default=True)),
                ('sort_order', models.PositiveIntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='badges', to='core.badgecategory')),
            ],
            options={
                'db_table': 'trust_badges',
                'ordering': ['category', 'sort_order', 'name'],
            },
        ),
        migrations.CreateModel(
            name='Amenity',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('icon', models.CharField(max_length=50)),
                ('description', models.TextField(blank=True)),
                ('is_verifiable', models.BooleanField(default=True)),
                ('verification_criteria', models.TextField(blank=True)),
                ('is_active', models.BooleanField(default=True)),
                ('sort_order', models.PositiveIntegerField(default=0)),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='amenities', to='core.amenitycategory')),
            ],
            options={
                'verbose_name_plural': 'Amenities',
                'db_table': 'amenities',
                'ordering': ['category', 'sort_order', 'name'],
                'unique_together': {('name', 'category')},
            },
        ),
        migrations.CreateModel(
            name='APIUsageLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('endpoint', models.CharField(max_length=200)),
                ('method', models.CharField(max_length=10)),
                ('ip_address', models.GenericIPAddressField()),
                ('user_agent', models.TextField(blank=True)),
                ('response_status', models.PositiveIntegerField()),
                ('response_time_ms', models.PositiveIntegerField()),
                ('request_size_bytes', models.PositiveIntegerField(default=0)),
                ('response_size_bytes', models.PositiveIntegerField(default=0)),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'api_usage_logs',
                'indexes': [models.Index(fields=['endpoint', 'method'], name='api_usage_l_endpoin_c87bb4_idx'), models.Index(fields=['user'], name='api_usage_l_user_id_2a4c3b_idx'), models.Index(fields=['timestamp'], name='api_usage_l_timesta_5a0769_idx'), models.Index(fields=['response_status'], name='api_usage_l_respons_0b06ee_idx')],
            },
        ),
        migrations.CreateModel(
            name='ErrorLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('error_type', models.CharField(max_length=100)),
                ('message', models.TextField()),
                ('stack_trace', models.TextField(blank=True)),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True)),
                ('request_data', models.JSONField(default=dict)),
                ('resolved', models.BooleanField(default=False)),
                ('resolved_at', models.DateTimeField(blank=True, null=True)),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('resolved_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='resolved_errors', to=settings.AUTH_USER_MODEL)),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'error_logs',
                'indexes': [models.Index(fields=['error_type'], name='error_logs_error_t_6c2e56_idx'), models.Index(fields=['resolved'], name='error_logs_resolve_5e3026_idx'), models.Index(fields=['timestamp'], name='error_logs_timesta_673a33_idx')],
            },
        ),
        migrations.CreateModel(
            name='Landmark',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('location', django.contrib.gis.db.models.fields.PointField(srid=4326)),
                ('address', models.TextField(blank=True)),
                ('description', models.TextField(blank=True)),
                ('phone', models.CharField(blank=True, max_length=20)),
                ('website', models.URLField(blank=True)),
                ('rating', models.DecimalField(blank=True, decimal_places=2, max_digits=3, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(5)])),
                ('is_active', models.BooleanField(default=True)),
                ('is_verified', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('landmark_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='landmarks', to='core.landmarktype')),
                ('neighborhood', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='landmarks', to='core.neighborhood')),
            ],
            options={
                'db_table': 'landmarks',
                'indexes': [models.Index(fields=['landmark_type'], name='landmarks_landmar_282865_idx'), models.Index(fields=['neighborhood'], name='landmarks_neighbo_d68345_idx'), models.Index(fields=['is_active'], name='landmarks_is_acti_06aed3_idx')],
            },
        ),
    ]
