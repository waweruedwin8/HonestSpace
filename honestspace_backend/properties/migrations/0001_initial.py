# Generated by Django 5.2.5 on 2025-08-12 00:20

import django.contrib.gis.db.models.fields
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import uuid
from decimal import Decimal
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('core', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='PropertyStatus',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(choices=[('draft', 'Draft'), ('pending', 'Pending Verification'), ('active', 'Active'), ('inactive', 'Inactive'), ('verified', 'Verified'), ('rejected', 'Rejected'), ('suspended', 'Suspended'), ('rented', 'Rented'), ('expired', 'Expired')], max_length=20, unique=True)),
                ('display_name', models.CharField(max_length=50)),
                ('description', models.TextField(blank=True)),
                ('color', models.CharField(default='#000000', max_length=7)),
                ('is_public', models.BooleanField(default=True)),
            ],
            options={
                'verbose_name_plural': 'Property statuses',
                'db_table': 'property_status',
            },
        ),
        migrations.CreateModel(
            name='PropertyType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(choices=[('studio', 'Studio'), ('1bedroom', '1 Bedroom'), ('2bedroom', '2 Bedroom'), ('3bedroom', '3 Bedroom'), ('4bedroom', '4+ Bedroom'), ('bungalow', 'Bungalow'), ('maisonette', 'Maisonette'), ('apartment', 'Apartment'), ('commercial', 'Commercial'), ('office', 'Office Space'), ('shop', 'Shop/Retail'), ('warehouse', 'Warehouse'), ('land', 'Land')], max_length=50, unique=True)),
                ('display_name', models.CharField(max_length=100)),
                ('category', models.CharField(choices=[('residential', 'Residential'), ('commercial', 'Commercial'), ('mixed', 'Mixed Use')], max_length=20)),
                ('description', models.TextField(blank=True)),
                ('icon', models.CharField(blank=True, max_length=50)),
                ('is_active', models.BooleanField(default=True)),
                ('sort_order', models.PositiveIntegerField(default=0)),
            ],
            options={
                'db_table': 'property_types',
                'ordering': ['sort_order', 'display_name'],
            },
        ),
        migrations.CreateModel(
            name='Property',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField()),
                ('rent_amount', models.DecimalField(decimal_places=2, max_digits=12, validators=[django.core.validators.MinValueValidator(Decimal('0.01'))])),
                ('deposit_amount', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=12)),
                ('currency', models.CharField(default='KES', max_length=3)),
                ('property_size_sqft', models.PositiveIntegerField(blank=True, null=True)),
                ('bedrooms', models.PositiveIntegerField(default=0)),
                ('bathrooms', models.PositiveIntegerField(default=0)),
                ('floors', models.PositiveIntegerField(default=1)),
                ('parking_spaces', models.PositiveIntegerField(default=0)),
                ('utilities_included', models.BooleanField(default=False)),
                ('is_furnished', models.BooleanField(default=False)),
                ('is_pet_friendly', models.BooleanField(default=False)),
                ('has_garden', models.BooleanField(default=False)),
                ('has_pool', models.BooleanField(default=False)),
                ('has_gym', models.BooleanField(default=False)),
                ('availability_date', models.DateField(default=django.utils.timezone.now)),
                ('minimum_lease_months', models.PositiveIntegerField(default=6)),
                ('maximum_lease_months', models.PositiveIntegerField(blank=True, null=True)),
                ('is_verified', models.BooleanField(default=False)),
                ('verification_date', models.DateTimeField(blank=True, null=True)),
                ('verification_score', models.DecimalField(blank=True, decimal_places=2, max_digits=3, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(10)])),
                ('view_count', models.PositiveIntegerField(default=0)),
                ('inquiry_count', models.PositiveIntegerField(default=0)),
                ('love_count', models.PositiveIntegerField(default=0)),
                ('slug', models.SlugField(blank=True, max_length=255, unique=True)),
                ('meta_description', models.CharField(blank=True, max_length=160)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('published_at', models.DateTimeField(blank=True, null=True)),
                ('expires_at', models.DateTimeField(blank=True, null=True)),
                ('landlord', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='properties', to=settings.AUTH_USER_MODEL)),
                ('verified_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='verified_properties', to=settings.AUTH_USER_MODEL)),
                ('status', models.ForeignKey(default=1, on_delete=django.db.models.deletion.PROTECT, related_name='properties', to='properties.propertystatus')),
                ('property_type', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='properties', to='properties.propertytype')),
            ],
            options={
                'db_table': 'properties',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='PropertyInquiry',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('subject', models.CharField(max_length=200)),
                ('message', models.TextField()),
                ('preferred_contact_method', models.CharField(choices=[('email', 'Email'), ('phone', 'Phone'), ('whatsapp', 'WhatsApp'), ('in_app', 'In-App Message')], default='email', max_length=20)),
                ('desired_move_in_date', models.DateField(blank=True, null=True)),
                ('lease_duration_months', models.PositiveIntegerField(blank=True, null=True)),
                ('budget_max', models.DecimalField(blank=True, decimal_places=2, max_digits=12, null=True)),
                ('status', models.CharField(choices=[('new', 'New'), ('responded', 'Responded'), ('scheduled', 'Viewing Scheduled'), ('viewed', 'Property Viewed'), ('application_submitted', 'Application Submitted'), ('approved', 'Approved'), ('rejected', 'Rejected'), ('closed', 'Closed')], default='new', max_length=25)),
                ('landlord_responded', models.BooleanField(default=False)),
                ('response_time_hours', models.PositiveIntegerField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('responded_at', models.DateTimeField(blank=True, null=True)),
                ('property', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='inquiries', to='properties.property')),
                ('tenant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='property_inquiries', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'property_inquiries',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='PropertyLandmark',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('distance_meters', models.PositiveIntegerField()),
                ('walking_time_minutes', models.PositiveIntegerField(blank=True, null=True)),
                ('driving_time_minutes', models.PositiveIntegerField(blank=True, null=True)),
                ('notes', models.TextField(blank=True)),
                ('is_highlighted', models.BooleanField(default=False)),
                ('distance_verified', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('landmark', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='nearby_properties', to='core.landmark')),
                ('property', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='nearby_landmarks', to='properties.property')),
                ('verified_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'property_landmarks',
            },
        ),
        migrations.CreateModel(
            name='PropertyLocation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('address_line_1', models.CharField(max_length=200)),
                ('address_line_2', models.CharField(blank=True, max_length=200)),
                ('postal_code', models.CharField(blank=True, max_length=20)),
                ('location', django.contrib.gis.db.models.fields.PointField(srid=4326)),
                ('address_verified', models.BooleanField(default=False)),
                ('coordinates_verified', models.BooleanField(default=False)),
                ('public_transport_distance_m', models.PositiveIntegerField(blank=True, null=True)),
                ('main_road_distance_m', models.PositiveIntegerField(blank=True, null=True)),
                ('neighborhood', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='properties', to='core.neighborhood')),
                ('property', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='location', to='properties.property')),
            ],
            options={
                'db_table': 'property_locations',
            },
        ),
        migrations.CreateModel(
            name='PropertyMedia',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('file', models.FileField(upload_to='property_media/')),
                ('thumbnail', models.ImageField(blank=True, null=True, upload_to='property_thumbnails/')),
                ('original_filename', models.CharField(max_length=255)),
                ('file_size_bytes', models.PositiveIntegerField()),
                ('title', models.CharField(blank=True, max_length=200)),
                ('description', models.TextField(blank=True)),
                ('alt_text', models.CharField(blank=True, max_length=255)),
                ('sort_order', models.PositiveIntegerField(default=0)),
                ('is_active', models.BooleanField(default=True)),
                ('is_primary', models.BooleanField(default=False)),
                ('processing_status', models.CharField(choices=[('pending', 'Pending'), ('processing', 'Processing'), ('completed', 'Completed'), ('failed', 'Failed')], default='completed', max_length=20)),
                ('uploaded_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('media_type', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='core.mediatype')),
                ('property', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='media', to='properties.property')),
            ],
            options={
                'db_table': 'property_media',
                'ordering': ['sort_order', 'uploaded_at'],
            },
        ),
        migrations.CreateModel(
            name='PropertyTrustBadge',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('verification_date', models.DateTimeField(auto_now_add=True)),
                ('verification_notes', models.TextField(blank=True)),
                ('is_active', models.BooleanField(default=True)),
                ('expires_at', models.DateTimeField(blank=True, null=True)),
                ('score_achieved', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('badge', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='property_badges', to='core.trustbadge')),
                ('property', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='trust_badges', to='properties.property')),
                ('verified_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='awarded_badges', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'property_trust_badges',
            },
        ),
        migrations.CreateModel(
            name='PropertyViewing',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('scheduled_datetime', models.DateTimeField()),
                ('duration_minutes', models.PositiveIntegerField(default=30)),
                ('tenant_confirmed', models.BooleanField(default=False)),
                ('landlord_confirmed', models.BooleanField(default=False)),
                ('status', models.CharField(choices=[('scheduled', 'Scheduled'), ('confirmed', 'Confirmed'), ('completed', 'Completed'), ('cancelled', 'Cancelled'), ('no_show', 'No Show')], default='scheduled', max_length=25)),
                ('landlord_notes', models.TextField(blank=True)),
                ('tenant_notes', models.TextField(blank=True)),
                ('tenant_rating', models.PositiveIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('landlord_rating', models.PositiveIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('inquiry', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='viewings', to='properties.propertyinquiry')),
            ],
            options={
                'db_table': 'property_viewings',
            },
        ),
        migrations.CreateModel(
            name='Review',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('overall_rating', models.PositiveIntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('title', models.CharField(max_length=200)),
                ('review_text', models.TextField()),
                ('pros', models.TextField(blank=True)),
                ('cons', models.TextField(blank=True)),
                ('is_verified', models.BooleanField(default=False)),
                ('verification_method', models.CharField(blank=True, choices=[('lease_agreement', 'Lease Agreement'), ('utility_bill', 'Utility Bill'), ('bank_statement', 'Bank Statement'), ('scout_verification', 'Scout Verification')], max_length=50)),
                ('helpful_count', models.PositiveIntegerField(default=0)),
                ('unhelpful_count', models.PositiveIntegerField(default=0)),
                ('reported_count', models.PositiveIntegerField(default=0)),
                ('is_approved', models.BooleanField(default=True)),
                ('is_featured', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('stay_duration_months', models.PositiveIntegerField(blank=True, null=True)),
                ('property', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reviews', to='properties.property')),
                ('tenant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reviews_written', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'reviews',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='ReviewMedia',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('file', models.FileField(upload_to='review_media/')),
                ('media_type', models.CharField(choices=[('image', 'Image'), ('video', 'Video')], max_length=10)),
                ('caption', models.CharField(blank=True, max_length=255)),
                ('sort_order', models.PositiveIntegerField(default=0)),
                ('is_approved', models.BooleanField(default=True)),
                ('uploaded_at', models.DateTimeField(auto_now_add=True)),
                ('review', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='media', to='properties.review')),
            ],
            options={
                'db_table': 'review_media',
                'ordering': ['sort_order', 'uploaded_at'],
            },
        ),
        migrations.CreateModel(
            name='ReviewRating',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rating_value', models.PositiveIntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('notes', models.TextField(blank=True)),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.ratingcategory')),
                ('review', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='detailed_ratings', to='properties.review')),
            ],
            options={
                'db_table': 'review_ratings',
            },
        ),
        migrations.CreateModel(
            name='LovedProperty',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('notes', models.TextField(blank=True)),
                ('loved_at', models.DateTimeField(auto_now_add=True)),
                ('last_viewed', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='loved_properties', to=settings.AUTH_USER_MODEL)),
                ('property', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='loved_by_users', to='properties.property')),
            ],
            options={
                'db_table': 'loved_properties',
                'indexes': [models.Index(fields=['user', 'loved_at'], name='loved_prope_user_id_724808_idx'), models.Index(fields=['property'], name='loved_prope_propert_d4cbf4_idx')],
                'unique_together': {('user', 'property')},
            },
        ),
        migrations.CreateModel(
            name='PropertyAmenity',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_verified', models.BooleanField(default=False)),
                ('verification_date', models.DateTimeField(blank=True, null=True)),
                ('verification_notes', models.TextField(blank=True)),
                ('notes', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('amenity', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='property_amenities', to='core.amenity')),
                ('property', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='property_amenities', to='properties.property')),
                ('verified_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='verified_amenities', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'property_amenities',
                'unique_together': {('property', 'amenity')},
            },
        ),
        migrations.CreateModel(
            name='PropertyAnalytics',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField()),
                ('views', models.PositiveIntegerField(default=0)),
                ('unique_views', models.PositiveIntegerField(default=0)),
                ('inquiries', models.PositiveIntegerField(default=0)),
                ('loves', models.PositiveIntegerField(default=0)),
                ('shares', models.PositiveIntegerField(default=0)),
                ('view_to_inquiry_rate', models.DecimalField(decimal_places=4, default=Decimal('0.0000'), max_digits=5)),
                ('inquiry_to_viewing_rate', models.DecimalField(decimal_places=4, default=Decimal('0.0000'), max_digits=5)),
                ('search_appearances', models.PositiveIntegerField(default=0)),
                ('search_clicks', models.PositiveIntegerField(default=0)),
                ('search_ctr', models.DecimalField(decimal_places=4, default=Decimal('0.0000'), max_digits=5)),
                ('social_shares', models.PositiveIntegerField(default=0)),
                ('social_clicks', models.PositiveIntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('property', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='daily_analytics', to='properties.property')),
            ],
            options={
                'db_table': 'property_analytics',
                'indexes': [models.Index(fields=['date'], name='property_an_date_b514ec_idx'), models.Index(fields=['property', 'date'], name='property_an_propert_a07126_idx')],
                'unique_together': {('property', 'date')},
            },
        ),
        migrations.AddIndex(
            model_name='propertyinquiry',
            index=models.Index(fields=['property', 'status'], name='property_in_propert_368d71_idx'),
        ),
        migrations.AddIndex(
            model_name='propertyinquiry',
            index=models.Index(fields=['tenant'], name='property_in_tenant__9350da_idx'),
        ),
        migrations.AddIndex(
            model_name='propertyinquiry',
            index=models.Index(fields=['created_at'], name='property_in_created_ff0fd2_idx'),
        ),
        migrations.AddIndex(
            model_name='propertylandmark',
            index=models.Index(fields=['distance_meters'], name='property_la_distanc_78205e_idx'),
        ),
        migrations.AddIndex(
            model_name='propertylandmark',
            index=models.Index(fields=['is_highlighted'], name='property_la_is_high_03ad8e_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='propertylandmark',
            unique_together={('property', 'landmark')},
        ),
        migrations.AddIndex(
            model_name='propertymedia',
            index=models.Index(fields=['property', 'is_active'], name='property_me_propert_adbd8b_idx'),
        ),
        migrations.AddIndex(
            model_name='propertymedia',
            index=models.Index(fields=['media_type'], name='property_me_media_t_cb092c_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='propertytrustbadge',
            unique_together={('property', 'badge')},
        ),
        migrations.AddIndex(
            model_name='property',
            index=models.Index(fields=['landlord'], name='properties_landlor_736d10_idx'),
        ),
        migrations.AddIndex(
            model_name='property',
            index=models.Index(fields=['property_type'], name='properties_propert_f6c75f_idx'),
        ),
        migrations.AddIndex(
            model_name='property',
            index=models.Index(fields=['status'], name='properties_status__b0dd99_idx'),
        ),
        migrations.AddIndex(
            model_name='property',
            index=models.Index(fields=['rent_amount'], name='properties_rent_am_983952_idx'),
        ),
        migrations.AddIndex(
            model_name='property',
            index=models.Index(fields=['is_verified'], name='properties_is_veri_381329_idx'),
        ),
        migrations.AddIndex(
            model_name='property',
            index=models.Index(fields=['created_at'], name='properties_created_abda95_idx'),
        ),
        migrations.AddIndex(
            model_name='property',
            index=models.Index(fields=['published_at'], name='properties_publish_4bc7e5_idx'),
        ),
        migrations.AddIndex(
            model_name='property',
            index=models.Index(fields=['availability_date'], name='properties_availab_4bf61a_idx'),
        ),
        migrations.AddIndex(
            model_name='propertyviewing',
            index=models.Index(fields=['scheduled_datetime'], name='property_vi_schedul_98c7a2_idx'),
        ),
        migrations.AddIndex(
            model_name='propertyviewing',
            index=models.Index(fields=['status'], name='property_vi_status_cc2a96_idx'),
        ),
        migrations.AddIndex(
            model_name='review',
            index=models.Index(fields=['property', 'is_approved'], name='reviews_propert_71c318_idx'),
        ),
        migrations.AddIndex(
            model_name='review',
            index=models.Index(fields=['overall_rating'], name='reviews_overall_fa1e40_idx'),
        ),
        migrations.AddIndex(
            model_name='review',
            index=models.Index(fields=['created_at'], name='reviews_created_53b5d6_idx'),
        ),
        migrations.AddIndex(
            model_name='review',
            index=models.Index(fields=['is_verified'], name='reviews_is_veri_aa479e_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='review',
            unique_together={('property', 'tenant')},
        ),
        migrations.AlterUniqueTogether(
            name='reviewrating',
            unique_together={('review', 'category')},
        ),
    ]
